networks:
  datelake-net:
    driver: bridge

volumes:
    datalake.prometheus.data: {}
    datalake.grafana.data: {}

services:

## --------------------------------------------- DASHBOARD SECTION --------------------------------------------
  # Container Grafana
  grafana:
    container_name: datalake.grafana
    image: grafana/grafana:11.3.0-ubuntu
    user: "0"
    volumes:
      - datalake.grafana.data:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SECURITY_ALLOW_EMBEDDING=true
    restart: unless-stopped
    links:
      - postgres
    expose:
      - 3000
    ports:
      - 3000:3000
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    networks:
      - datelake-net
#    logging:
#      driver: loki
#      options:
#        loki-url: "http://loki:3100/loki/api/v1/push"
## ------------------------------------------- END DASHBOARD SECTION ------------------------------------------

## --------------------------------------------- JUPYTER SECTION --------------------------------------------
   # Custom datascience-notebook, for us to use
  datascience-notebook:
    container_name: datalake.jupyter
    # So that we can add the libraryies that I want/need use a custom 
    build: ./jupyter/.
    image: cstone/jupyter_notebook
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    volumes:
      - ./jupyter/work:/home/jovyan/work
    ports:
      - 3020:8888
    environment:
      JUPYTER_ENABLE_LAB: "yes"
    command: "start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''"
    networks:
      - datelake-net
## ------------------------------------------- END JUPYTER SECTION ------------------------------------------

## --------------------------------------------- POSTGRES SECTION ---------------------------------------------
  # Database Container (postgres)
  postgres:
    container_name: datalake.pg
    build: ./postgres
    image: cstone/postgres_example
    restart: always
    environment:
      POSTGRES_USER: shoc
      POSTGRES_PASSWORD: shoc
      POSTGRES_DB: test_db
      PGAGENT_ENABLED: 'true' # Must be string
      PGAGENT_USER: pgagent
      PGAGENT_PASSWORD: secret
      PGAGENT_DB: pgagent
      PGAGENT_LOG_LEVEL: 2
    ports:
      - "5432:5432"
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
    networks:
      - datelake-net

  # Container of PGAdmin (web-based admin tool for postgres database)
  pgadmin:
    container_name: datalake.pg_admin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: shoc@shoc.us
      PGADMIN_DEFAULT_PASSWORD: shoc
    ports:
      - "3030:80"
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    networks:
      - datelake-net
## ------------------------------------------- END POSTGRES SECTION -------------------------------------------

## --------------------------------------------- NIFI SECTION ---------------------------------------------
  nifi:
    container_name: datalake.nifi
    image: apache/nifi:1.28.0
    ports:
      - "3010:8080/tcp" # HTTP interface
      - "3011:8443/tcp" # HTTPS interface
      - "514:514/tcp" # Syslog
      - "514:514/udp" # Syslog
      - "2055:2055/udp" # NetFlow
      - "9000:9000/tcp" # Nifi - Listening port for API
      - "9999:9999/tcp" # Nifi - Listening port for API
    environment:
      NIFI_WEB_HTTP_PORT: 8443
    networks:
      - datelake-net
    cap_add:
      - NET_ADMIN # low port bindings
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
      
#    volumes:
#      - ./nifi/drivers:/opt/nifi/nifi-current/drivers
#      - ./nifi/certs:/opt/certs
#      - ./nifi/conf:/opt/nifi/nifi-current/conf
    restart: unless-stopped
## ------------------------------------------- END NIFI SECTION -------------------------------------------


## ------------------------------------------ LOG-MONITORING SECTION ------------------------------------------
  # Loki container for log aggregation
  loki:
    container_name: datalake.loki
    image: grafana/loki:2.3.0
    restart: unless-stopped
    ports:
      - "3100:3100"
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    volumes:
      - ./loki/config/loki-config.yaml:/etc/loki/loki-config.yaml
      - ./loki/data:/data/loki
    command: -config.file=/etc/loki/loki-config.yaml
    networks:
      - datelake-net

  # Promtail will take any log file and export it to loki for you,
  #   this one assumes that you used a standard install for the 
  #   docker containers, this works for linux.  Not sure about MAC's
  promtail:
    container_name: datalake.promtail
    image: grafana/promtail:2.3.0
    restart: unless-stopped
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers
      - ./promtail/config/docker-config.yml:/etc/promtail/docker-config.yml
    command: -config.file=/etc/promtail/docker-config.yml
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    networks:
      - datelake-net
## ---------------------------------------- END LOG-MONITORING SECTION ----------------------------------------

## ----------------------------------------- SYSTEM-MONITORING SECTION ----------------------------------------
  prometheus:
    container_name: datalake.prometheus
    image: prom/prometheus:v2.37.0
    volumes:
      - ./prometheus:/etc/prometheus
      - datalake.prometheus.data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    networks:
      - datelake-net

  alertmanager:
    container_name: datalake.alertmanager
    image: prom/alertmanager:v0.24.0
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    expose:
      - 9093
    networks:
      - datelake-net

  nodeexporter:
    container_name: datalake.nodeexporter
    image: prom/node-exporter:v1.3.1
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
    restart: unless-stopped
    expose:
      - 9100
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    networks:
      - datelake-net

  cadvisor:
    container_name: datalake.cadvisor
    image: gcr.io/cadvisor/cadvisor:v0.44.0
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    restart: unless-stopped
    expose:
      - 8080
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    networks:
      - datelake-net

  pushgateway:
    container_name: datalake.pushgateway
    image: prom/pushgateway:v1.4.3
    restart: unless-stopped
    expose:
      - 9091
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    networks:
      - datelake-net
    labels:
      org.label-schema.group: "business-intelligence"

## --------------------------------------- END SYSTEM-MONITORING SECTION --------------------------------------

  # Random Log Generators
#  shoc_log_gen_01:
#    container_name: shoc_log_gen_01
#    build: ./generators/log/01/
#    restart: always
#    logging:
#      driver: "json-file"
#      options:
#        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
#    networks:
#     - datelake-net
  shoc_log_gen_02:
    container_name: shoc_log_gen_02
    build: ./generators/log/02/
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    networks:
     - datelake-net
  shoc_log_gen_03:
    container_name: shoc_log_gen_03
    build: ./generators/log/03/
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    networks:
     - datelake-net

  # Network Mapping Generators
  shoc_net_map_01:
    container_name: shoc_net_map_01
    build: ./generators/network/01/
    restart: always
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    networks:
     - datelake-net      